// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
//Models Go here
model User {
  id    Int     @id @default(autoincrement())
  email String  @db.VarChar(60) @unique
  firstName  String @db.VarChar(70)
  lastName String @db.VarChar(60)
  password String @db.VarChar(255)
  phoneNumber String? @db.VarChar(15)
  vehicles Vehicle[]
  assignedJobs Job[] @relation("AssignedMechanic") //name argument is to disambiguate
  createdJobs Job[] @relation("CreatedBy")
  roles Role[]
  appointments Appointment[] @relation("MadeAppointment")
  assignedAppointments Appointment[] @relation("AssignedMech")
  addresses Address[]


}

model Address{
  id Int @id @default(autoincrement())
  streetAddress String @db.Text
  town String @db.VarChar(100)
  parish String @db.VarChar(90)
  user User @relation(fields: [userId], references: [id])
  userId Int 
}

model Role{
  id Int @id @default(autoincrement())
  role String @db.VarChar(40)
  users User[]
}
model Vehicle{
  id Int @id @default(autoincrement())
  licensePlate String? @db.VarChar(8)
  make String @db.VarChar(100)
  model String @db.VarChar(100)
  year Int 
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int
  image String? @db.VarChar(255)
  jobs Job[]
  appointments Appointment[]
}

model Appointment{
  id Int @id @default(autoincrement())
  problemDescription String @db.Text
  suggestedDate DateTime @db.DateTime()
  streetAddress String @db.Text
  town String @db.VarChar(255)
  parish String @db.VarChar(90)
  images Appointment_Image[]
  customer User @relation(name: "MadeAppointment", fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
  fulfilled Boolean @db.TinyInt @default(false)
  assignedMech User? @relation(name: "AssignedMech", fields: [assignedMechId], references: [id], onDelete: SetNull)
  assignedMechId Int?
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  vehicleId Int
  /// Corresponds to the scheduled date and information created by the Manager after processing the appt
  scheduledItem Schedule? @relation(fields: [scheduledItemId], references: [id], onUpdate: Cascade)
  scheduledItemId Int? @unique
}

model Appointment_Image{
  id Int @id @default(autoincrement())
  imageUrl String 
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId Int?
}

model Job {
  jobNumber Int @id @default(autoincrement())
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  summary String @db.Text
  totalCost Decimal? @db.Decimal()
  isPaid Boolean @default(false)
  serviceType String @db.VarChar(12)
  serviceFee Decimal @db.Decimal()
  streetAddress String? @db.Text
  town String? @db.VarChar(255)
  parish String? @db.VarChar(90)
  confirmed Boolean @default(false)
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId Int 
  assignedMechanic User? @relation(name: "AssignedMechanic", fields: [assignedMechanicId], references: [id], onDelete: SetNull)
  assignedMechanicId Int?
  createdBy User @relation(name:"CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  stages JobStage[]
  requiredParts JobPart[]
  completed Boolean @default(false)
}

model JobStage{
  stageNumber Int
  description String @db.Text
  duration Int 
  images JobStage_Image[]
  job Job @relation(fields: [jobNumber], references: [jobNumber], onDelete: Cascade)
  jobNumber Int
  /// Corresponds to the schedule stored in the database
  scheduledItem Schedule? @relation(fields: [scheduledItemId], references: [id], onUpdate: Cascade)
  scheduledItemId Int? @unique

  @@id([stageNumber, jobNumber], name: "id")

}
model JobStage_Image{
  id Int @id @default(autoincrement())
  imageUrl String 
  stage JobStage @relation(fields: [jobStageId, jobNumberId], references: [stageNumber, jobNumber], onDelete: Cascade)
  jobStageId Int
  jobNumberId Int
  
}

model JobPart{
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  price Decimal @db.Decimal()
  job Job @relation(fields: [jobId], references: [jobNumber], onDelete: Cascade)
  jobId Int


}

model Schedule{
  id Int @id @default(autoincrement())
  date DateTime @unique
  appointment Appointment?
  jobStage JobStage?
}


